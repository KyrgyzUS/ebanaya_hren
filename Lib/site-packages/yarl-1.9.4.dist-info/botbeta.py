import sqlite3

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('bot_data.db')

# Create a cursor object
cursor = conn.cursor()

# Create a table
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER NOT NULL,
    question TEXT NOT NULL,
    date TEXT NOT NULL,
    time TEXT NOT NULL
)
''')

# Commit the changes and close the connection
conn.commit()
conn.close()

import openai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai import AsyncOpenAI, OpenAIError
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from datetime import datetime
import asyncio

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
TELEGRAM_API_TOKEN = '7130675357:AAH-rJDqmG54sd1HnryRCwtDygRJb25hiyA'
# –í–∞—à API-–∫–ª—é—á OpenAI
OPENAI_API_KEY = 'sk-proj-vbp5XiLBUs9LU1r6qPaWT3BlbkFJrQQwKSHs89x9zwu8T582'
# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google
SERVICE_ACCOUNT_FILE = 'C:\\RENDERS ANIM\\pythonProject4\\iron-figure-424308-d0-5c09bc12ac78.json'

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gspread_client = gspread.authorize(creds)

# Google Drive API –∫–ª–∏–µ–Ω—Ç
drive_service = build('drive', 'v3', credentials=creds)

# ID –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
source_spreadsheet_id = '1ahBGla54O1op6DchLZ10d_4JMIEYQJtxGgIPp89JFms'

# –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
knowledge_base = [
    "|–¢–ö 'ALPHA cargo' —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ú–æ—Å–∫–≤–∞: –ü–æ—à–∏–≤ - 1–∫–≥ 50‚ÇΩ, –ü—Ä–∏–≤–æ–∑–Ω—ã–µ - 1–∫–≥ 55‚ÇΩ, –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - 1–∫–≥ 65‚ÇΩ, –ë—Ä–µ–Ω–¥ - 1–∫–≥ 65‚ÇΩ, –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ :–ì. –ú–æ—Å–∫–≤–∞ –î–∂–µ—Ä–∂–∏–Ω—Å–∫–∏–π —É–ª –≠–Ω–µ—Ä–∫–µ—Ç–∏–∫–æ–≤  30 —Å—Ç—Ä–æ–µ–Ω–∏–µ 2, –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ 5-7 –¥–Ω–µ–π, –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–∫–≥. —Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 1000 ‚ÇΩ"

    "|–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: –ü–æ—à–∏–≤-1–∫–≥ 50—Ä, –ü—Ä–∏–≤–æ–∑–Ω—ã–µ-1–∫–≥ 50—Ä, –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞-1–∫–≥ 65—Ä, –ë—Ä–µ–Ω–¥-1–∫–≥ 65—Ä, –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ +- 8 –¥–Ω–µ–π"

    "|–í –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –∏ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —á–∞—Å—Ç–Ω—ã–µ –∫–∞—Ä–≥–æ (–∞–±—É-—Å–∞—Ö–∏). –î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏—Ç 3,5$ –∑–∞ –æ–¥–∏–Ω –∫–∏–ª–æ–≥—Ä–∞–º–º –µ—Å–ª–∏ –≤–µ—Å –≥—Ä—É–∑–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 20–∫–≥. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ  20–∫–≥ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –æ–¥–∏–Ω –∫–∏–ª–æ–≥—Ä–∞–º–º –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 3$. –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ +-7 –¥–Ω–µ–π."

    "|–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä–≥–æ –¥–æ –£–§–´: –ü—Ä–∞–π—Å –∑–∞ 1–∫–≥.: –ü–æ—à–∏–≤, –¢–∫–∞–Ω–∏ - 40 —Ä—É–±–ª–µ–π –ö–∏—Ç–∞–π - 50 —Ä—É–±–ª–µ–π –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - 50 —Ä—É–±–ª–µ–π (–º–µ–Ω–µ–µ 50–∫–≥ –∑–∞ 1 –º–µ—Å—Ç–æ-70 —Ä—É–±–ª–µ–π) –ë—Ä–µ–Ω–¥ - 50 —Ä—É–±–ª–µ–π –¢—É—Ä—Ü–∏—è - 60 —Ä—É–±–ª–µ–π"

    "|–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –°–∞–º–∞—Ä–∞: –ü–æ—à–∏–≤ - 1–∫–≥ 55‚ÇΩ –ü—Ä–∏–≤–æ–∑–Ω—ã–µ - 1–∫–≥ 55‚ÇΩ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - 1–∫–≥ 65‚ÇΩ –ë—Ä–µ–Ω–¥ - 1–∫–≥ 65‚ÇΩ –û–±—É–≤—å - 1–∫–≥ 100‚ÇΩ. –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ 6-7–¥–Ω–µ–π. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–∫–≥. —Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 1000 ‚ÇΩ"

    "|–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ö–∞–∑–∞–Ω—å: –ü–æ—à–∏–≤ - 1–∫–≥ 45‚ÇΩ –ü—Ä–∏–≤–æ–∑–Ω—ã–µ - 1–∫–≥ 55‚ÇΩ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - 1–∫–≥ 65‚ÇΩ –ë—Ä–µ–Ω–¥ - 1–∫–≥ 65‚ÇΩ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ 7-8 –¥–Ω–µ–π. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–∫–≥. —Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 1000 ‚ÇΩ"

    "|–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫: –ü–æ—à–∏–≤-1–∫–≥ 55—Ä –ü—Ä–∏–≤–æ–∑–Ω—ã–µ-1–∫–≥ 65—Ä –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞-1–∫–≥ 85—Ä –ë—Ä–µ–Ω–¥-1–∫–≥ 85—Ä –û–±—É–≤—å-1–∫–≥ 105—Ä. –≥.–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–∞–∑–µ—Ç—ã ¬´–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –†–∞–±–æ—á–∏–π¬ª 27 —Å—Ç—Ä–æ–µ–Ω–∏–µ 70,¬†–¢–ö¬†¬´–í–æ—Å—Ç–æ—á–Ω—ã–π¬ª."

    "|–ü—Ä—è–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –†–æ—Å—Å–ö–∞—Ä–≥–æ. –ì. –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É. –ü–æ—à–∏–≤ 1–∫–≥ - 55 ‚ÇΩ –ö–∏—Ç–∞–π, –¢—É—Ä—Ü–∏—è - 70 ‚ÇΩ –ë—Ä–µ–Ω–¥, –ú–∞—Ä–∫–∏—Ä 1–∫–≥ - 70‚ÇΩ –°–ø–µ—Ü. —Ñ–æ—Ä–º–∞ 1–∫–≥ - 60‚ÇΩ –û–±—É–≤—å 1–∫–≥ - 100‚ÇΩ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ +-7–¥–Ω–µ–π"

    "|–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É: —á–∞—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏, –∑–∞–ø–∞–¥–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ¬±3-5 –¥–Ω–µ–π, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ¬±1-4 –¥–Ω—è, –≤–æ—Å—Ç–æ—á–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω 1-3 –¥–Ω—è. –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞."

    "|–û–±—É–≤—å –≤—ã–∫—É–ø–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–µ–º , –Ω–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –¢–ö –∫–æ—Ä–æ–±–∫—É –ª–∏–±–æ —Å–∞–º—É –æ–±—É–≤—å –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ–º—è—Ç—å. –ò —É—Ç–æ—á–Ω—è–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã —É –∞–¥–º–∏–Ω–∞  , –Ω–∞ –æ–±—É–≤—å —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –∑–∞ –æ–±—ä–µ–º–∞"

    "|–í –î–∞–≥–µ—Å—Ç–∞–Ω, –°–æ—á–∏, –ú–∞—Ö–∞—á–∫–∞–ª—É, –ü—è—Ç–∏–≥–æ—Ä—Å–∫, –•–∞—Å–∞–≤—é—Ä—Ç, –ì—Ä–æ–∑–Ω—ã–π, –ß–µ—á–Ω—é –≥—Ä—É–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–º —á–µ—Ä–µ–∑ –ú–æ—Å–∫–≤—É"

    "|–∫—É—Ä—Å —Ä—É–±–ª—è = 0,95 —Å–æ–º–∞. –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ = 86 —Å–æ–º. –ö—É—Ä—Å —Ç–µ–Ω–≥–µ = 0.196 —Å–æ–º–∞."

    "|–ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –µ—Å—Ç—å. –ü—Ä–∞–π—Å (—Ü–µ–Ω–∞) —Ñ—É–ª–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞ (–§–§): https://docs.google.com/spreadsheets/d/1C7Ik1OxD_Bsrkb43IqaBNK_QHQw9Byk8ZcnYVJ58Y0A/edit?usp=drivesdk"

    "|–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ / –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —É—Å–ª—É–≥–∏: (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä). –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—É–º–º–µ, –æ—Ç 1-—É–ø–∞–∫–æ–≤–æ–∫ (–ª–∏–Ω–∏–µ–π). –î–æ $99 - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 600 —Å–æ–º. –û—Ç $140 - 6% –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è). –û—Ç $999 - —Ç–æ—Ä–≥—É–µ–º–æ (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞) ü§ù. –í—ã—à–µ $1999 - –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∏–∂–Ω–∏—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω ü•≥. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤—ã–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–¥–∞—á–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º (–∫–æ–º–∞–Ω–¥–∞ –∏–∑ –±–æ–ª–µ–µ 150 —á–µ–ª–æ–≤–µ–∫) –î–æ—Ä–¥–æ–π –§—ç—à–Ω - —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–≤–æ–¥–∞ / –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (WhatsApp & Telegram) –≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–º–µ—Ä–∞ wa.me/996500996500"

    "|–¢–ö ALPHA cargo —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫: –ü–æ—à–∏–≤ - 1–∫–≥ 50‚ÇΩ, –ü—Ä–∏–≤–æ–∑–Ω—ã–µ - 1–∫–≥ 55‚ÇΩ, –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - 1–∫–≥ 65‚ÇΩ, –ë—Ä–µ–Ω–¥ - 1–∫–≥ 65‚ÇΩ, –ê–¥—Ä–µ—Å: –≥.–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –°–ù–¢ –í–µ—Å–Ω–∞ –°–∏–±–∏—Ä–∏,65 –¢–ö ¬´–í–æ—Å—Ç–æ–∫¬ª, –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ 7-8 –¥–Ω–µ–π, –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–∫–≥. —Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 1000 ‚ÇΩ"

    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É +996 705 705 996."
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def save_question_to_db(chat_id, question):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    date = datetime.now().strftime('%Y-%m-%d')
    time = datetime.now().strftime('%H:%M:%S')
    cursor.execute('''
    INSERT INTO user_questions (chat_id, question, date, time)
    VALUES (?, ?, ?, ?)
    ''', (chat_id, question, date, time))
    conn.commit()
    conn.close()

def get_all_questions():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id, question, date, time FROM user_questions')
    rows = cursor.fetchall()
    conn.close()
    return rows


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    create_button = InlineKeyboardButton("C–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É", callback_data="create_table")
    keyboard.add(create_button)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'create_table')
async def process_callback_create_table(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
    try:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        copy_title = "Copy of Source Spreadsheet"
        copied_file = drive_service.files().copy(
            fileId=source_spreadsheet_id,
            body={"name": copy_title}
        ).execute()

        new_spreadsheet_id = copied_file['id']

        # –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö
        permission = {
            'type': 'anyone',
            'role': 'reader',
        }
        drive_service.permissions().create(
            fileId=new_spreadsheet_id,
            body=permission
        ).execute()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id] = {'spreadsheet_id': new_spreadsheet_id}

        await bot.send_message(user_id, "–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=cancel_keyboard())
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def cancel_keyboard():
    keyboard = InlineKeyboardMarkup()
    cancel_button = InlineKeyboardButton("Cancel", callback_data="cancel")
    keyboard.add(cancel_button)
    return keyboard

@dp.callback_query_handler(lambda c: c.data == 'cancel')
async def cancel_process(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in user_data and 'spreadsheet_id' in user_data[user_id]:
        try:
            drive_service.files().delete(fileId=user_data[user_id]['spreadsheet_id']).execute()
            await bot.send_message(user_id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω –∏ —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            await bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")
    else:
        await bot.send_message(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    user_data.pop(user_id, None)

@dp.message_handler(lambda message: message.from_user.id in user_data and 'first_name' not in user_data[message.from_user.id])
async def process_first_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['first_name'] = message.text
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=cancel_keyboard())

@dp.message_handler(lambda message: message.from_user.id in user_data and 'last_name' not in user_data[message.from_user.id])
async def process_last_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['last_name'] = message.text
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=cancel_keyboard())

@dp.message_handler(lambda message: message.from_user.id in user_data and 'manager_name' not in user_data[message.from_user.id])
async def process_manager_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['manager_name'] = message.text

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    first_name = user_data[user_id]['first_name']
    last_name = user_data[user_id]['last_name']
    manager_name = user_data[user_id]['manager_name']
    today = datetime.today().strftime('%d.%m.%Y')
    new_title = f"{first_name} {last_name} - {manager_name} {today}"

    drive_service.files().update(
        fileId=user_data[user_id]['spreadsheet_id'],
        body={"name": new_title}
    ).execute()

    new_spreadsheet_url = f"https://docs.google.com/spreadsheets/d/{user_data[user_id]['spreadsheet_id']}/edit"
    await message.reply(f"–¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö: {new_spreadsheet_url}")
    user_data.pop(user_id)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(commands=['allquestions'])
async def send_all_questions(message: types.Message):
    questions = get_all_questions()
    if not questions:
        await message.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    for chat_id, question, date, time in questions:
        response += f"Chat ID: {chat_id}\n–í–æ–ø—Ä–æ—Å: {question}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n\n"

    await message.reply(response)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_question = message.text.lower()
    response = await get_response(user_question)
    await message.reply(response)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_question = message.text.lower()
    save_question_to_db(message.chat.id, user_question)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    response = await get_response(user_question)
    await message.reply(response)

async def get_response(question):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    knowledge_base_content = "\n".join([f"–û—Ç–≤–µ—Ç: {a}" for a in knowledge_base])
    messages = [
        {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –∏ –ë–µ–ª–∞—Ä—É—Å—Å–∏–∏ –∏–Ω–∞—á–µ —Å–∫–∞–∂–∏ '–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ +996 705 705 996' –¥–∞–ª–µ–µ –µ—Å–ª–∏ —É —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –≥–æ—Ä–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≤ –±–∞–∑–µ –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ, —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–ª–∏–∂–∞–π—à–∏–π –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ (–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏) –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –≥–æ—Ä–æ–¥) –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –¢–ö (–±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥)' –∏ –≤—ã—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π –≤—Å—é –∞ –ø–æ—Å–ª–∫ –¥–æ–ø–∏—à–∏ '–¥–æ—Å—ã–ª –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –º–µ—Å—Ç–Ω—ã—Ö –¢–ö'. –ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç –æ—Ç–≤–µ—Ç—å '–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ +996 705 705 996' "},
        {"role": "user", "content": f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{knowledge_base_content} –í–æ–ø—Ä–æ—Å: {question}\n"}
    ]
    return await get_openai_response(messages)

async def get_openai_response(messages):
    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        return response.choices[0].message.content.strip()
    except OpenAIError as e:
        if e.code == 'insufficient_quota':
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω –∏ –¥–µ—Ç–∞–ª–∏ –±–∏–ª–ª–∏–Ω–≥–∞."
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}"

async def on_startup(dp):
    while True:
        try:
            await dp.start_polling()
        except (asyncio.TimeoutError, aiohttp.ClientConnectionError, aiohttp.ClientPayloadError, aiohttp.ServerDisconnectedError) as e:
            print(f"Network error occurred: {e}. Restarting polling...")
            await asyncio.sleep(5)

async def on_startup(dp):
    while True:
        try:
            await dp.start_polling()
        except (asyncio.TimeoutError, aiohttp.ClientConnectionError, aiohttp.ClientPayloadError, aiohttp.ServerDisconnectedError) as e:
            print(f"Network error occurred: {e}. Restarting polling...")
            await asyncio.sleep(5)
        except Exception as e:
            print(f"An unexpected error occurred: {e}. Restarting polling...")
            await asyncio.sleep(5)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
